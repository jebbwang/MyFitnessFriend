import { StyleSheet } from "react-native";
export var COLOR_DEFAULT = {
    trackActiveBg: "#aacfcf",
    trackInActiveBg: "#679b9b",
    textActive: "#ffffff",
    textInActive: "#888888",
    thumbActive: "#fde2e2",
    thumbInActive: "#ffb6b6",
    disable: "#666666",
    borderColor: "transparent",
};
export var SIZE_DEFAULT = {
    trackBarHeight: 50,
    trackBarRadius: 25,
    trackBarWidth: 150,
    thumbBtnHeight: 50,
    thumbBtnRadius: 25,
    thumbBtnWidth: 50,
    borderWidth: 0,
};
export var DefaultThumbChildrenProps = {
    toggleValue: false,
    placement: "left",
    activeColor: COLOR_DEFAULT.textActive,
    inActiveColor: COLOR_DEFAULT.textInActive,
    title: null,
    children: null,
    disabled: false,
    disabledTitleStyle: null,
};
export var DefaultReactNativeToggleElementProps = {
    onPress: function () { return console.warn("Please attach a method for Toggle Button"); },
    value: false,
    disabled: false,
    leftComponent: null,
    rightComponent: null,
    thumbActiveComponent: null,
    thumbInActiveComponent: null,
    trackBar: {
        borderWidth: SIZE_DEFAULT.borderWidth,
        width: SIZE_DEFAULT.trackBarWidth,
        height: SIZE_DEFAULT.trackBarHeight,
        radius: SIZE_DEFAULT.trackBarRadius,
        activeBackgroundColor: COLOR_DEFAULT.trackActiveBg,
        inActiveBackgroundColor: COLOR_DEFAULT.trackInActiveBg,
        borderActiveColor: COLOR_DEFAULT.borderColor,
        borderInActiveColor: COLOR_DEFAULT.borderColor,
    },
    thumbButton: {
        borderWidth: SIZE_DEFAULT.borderWidth,
        width: SIZE_DEFAULT.thumbBtnWidth,
        height: SIZE_DEFAULT.thumbBtnHeight,
        radius: SIZE_DEFAULT.thumbBtnRadius,
        activeBackgroundColor: COLOR_DEFAULT.thumbActive,
        inActiveBackgroundColor: COLOR_DEFAULT.thumbInActive,
        activeColor: COLOR_DEFAULT.textActive,
        inActiveColor: COLOR_DEFAULT.textInActive,
    },
    leftTitle: null,
    rightTitle: null,
    containerStyle: null,
    trackBarStyle: null,
    disabledStyle: {
        opacity: 0.5,
    },
    disabledTitleStyle: {
        color: COLOR_DEFAULT.disable,
    },
    thumbStyle: {
        position: "absolute",
        justifyContent: "center",
        alignItems: "center",
    },
    animationDuration: 350,
};
export var ToggleStyles = StyleSheet.create({
    container: {
        flexDirection: "row",
        alignItems: "center",
    },
    thumbPosition: {
        position: "absolute",
        justifyContent: "center",
        alignItems: "center",
    },
    thumbLeft: {
        left: 0,
    },
    thumbRight: {
        right: 0,
    },
    thumbAnimatedPosition: {
        position: "absolute",
    },
});
export var ToogleTrackBarStyles = {
    trackBar: function (trackBar) {
        var width = trackBar.width, height = trackBar.height, radius = trackBar.radius, borderWidth = trackBar.borderWidth;
        var borderW = borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0;
        var trackBarW = width !== null && width !== void 0 ? width : SIZE_DEFAULT.trackBarWidth;
        var trackBarH = height !== null && height !== void 0 ? height : SIZE_DEFAULT.trackBarHeight;
        var borderRadius = radius !== null && radius !== void 0 ? radius : SIZE_DEFAULT.trackBarRadius;
        return {
            width: trackBarW,
            height: trackBarH,
            borderRadius: borderRadius,
            justifyContent: "center",
            borderWidth: borderW,
        };
    },
};
export var ToggleThumbButtonStyles = {
    thumbButton: function (thumbButton, trackBarBorderWidth) {
        var borderW = trackBarBorderWidth !== null && trackBarBorderWidth !== void 0 ? trackBarBorderWidth : 0;
        var width = thumbButton.width, height = thumbButton.height, radius = thumbButton.radius;
        var thumbBtnW = width !== null && width !== void 0 ? width : SIZE_DEFAULT.thumbBtnWidth;
        var thumbBtnH = height !== null && height !== void 0 ? height : SIZE_DEFAULT.thumbBtnHeight;
        var thumbBtnRadius = radius !== null && radius !== void 0 ? radius : SIZE_DEFAULT.thumbBtnRadius;
        width = thumbBtnW - borderW * 2;
        height = thumbBtnH - borderW * 2;
        radius = thumbBtnRadius - borderW / 4;
        return {
            width: width,
            height: height,
            borderRadius: radius,
        };
    },
};
//# sourceMappingURL=constants.js.map