import { useEffect, useRef, useState } from "react";
import { Animated } from "react-native";
import { SIZE_DEFAULT } from "./constants";
export var useTitleTextColor = function (toggleValue, activeColor, inActiveColor, title, placement) {
    if (!title)
        return null;
    var onColor = toggleValue ? inActiveColor : activeColor;
    var offColor = toggleValue ? activeColor : inActiveColor;
    var textColor = placement === "left" ? onColor : offColor;
    return { textColor: textColor };
};
export var useToggleValue = function (value, thumbButton, trackBar, animationDuration, onPress) {
    var fadeAnim = useRef(new Animated.Value(0)).current;
    var _a = useState(value), toggleValue = _a[0], setToggleValue = _a[1];
    useEffect(function () {
        updateThumbButton(toggleValue);
    }, [toggleValue]);
    useEffect(function () {
        setToggleValue(value);
    }, [value]);
    var updateThumbButton = function (toggleState) {
        var _a, _b;
        var thumbBtnWidth = (_a = thumbButton.width) !== null && _a !== void 0 ? _a : SIZE_DEFAULT.thumbBtnWidth;
        var trackBarW = (_b = trackBar.width) !== null && _b !== void 0 ? _b : SIZE_DEFAULT.trackBarWidth;
        var distance = trackBarW - thumbBtnWidth;
        var toValue = toggleState ? distance : 0;
        Animated.timing(fadeAnim, {
            toValue: toValue,
            duration: animationDuration,
            useNativeDriver: true,
        }).start();
    };
    var handleToggle = function () {
        var val = !toggleValue;
        setToggleValue(val);
        onPress(val);
    };
    var handlePress = function () {
        handleToggle();
    };
    var handleLongPress = function () {
        handleToggle();
    };
    return {
        toggleValue: toggleValue,
        handlePress: handlePress,
        handleLongPress: handleLongPress,
        fadeAnim: fadeAnim,
    };
};
//# sourceMappingURL=hooks.js.map